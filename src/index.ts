import {
  TASK_NODE_GET_PROVIDER,
  TASK_TEST_SETUP_TEST_ENVIRONMENT,
} from "hardhat/builtin-tasks/task-names";
import { subtask } from "hardhat/config";
import { EthereumProvider } from "hardhat/types";

const CREATE2ANY_ADDRESS = "0x49088917Be000E083963312b50866fDf52798A8b";
const CREATE2ANY_DEPLOYER = "0x34B70737b715CDda9aE627E39080459b89858e44";
const CREATE2ANY_PAYLOAD =
  "0xf9077a80850684ee18008367a30a8080b90727608060405234801561001057600080fd5b50610707806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806385bb39231461004657806385cf97ab1461008d578063fb3f63ee1461012d575b600080fd5b6100796004803603602081101561005c57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166101f6565b604080519115158252519081900360200190f35b610104600480360360408110156100a357600080fd5b813591908101906040810160208201356401000000008111156100c557600080fd5b8201836020820111156100d757600080fd5b803590602001918460018302840111640100000000831117156100f957600080fd5b50909250905061020b565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6101046004803603606081101561014357600080fd5b8135919081019060408101602082013564010000000081111561016557600080fd5b82018360208201111561017757600080fd5b8035906020019184600183028401116401000000008311171561019957600080fd5b9193909290916020810190356401000000008111156101b757600080fd5b8201836020820111156101c957600080fd5b803590602001918460018302840111640100000000831117156101eb57600080fd5b509092509050610282565b60006020819052908152604090205460ff1681565b600061024684848460405160200180838380828437808301925050509250505060405160208183030381529060405280519060200120610673565b73ffffffffffffffffffffffffffffffffffffffff811660009081526020819052604090205490915060ff161561027b575060005b9392505050565b60007fffffffffffffffffffffffffffffffffffffffff000000000000000000000000861615806102b65750606086901c33145b61032157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f4531000000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600061035c87878760405160200180838380828437808301925050509250505060405160208183030381529060405280519060200120610673565b73ffffffffffffffffffffffffffffffffffffffff811660009081526020819052604090205490915060ff16156103f457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f4532000000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b606086868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505082519293508a929150506020830134f59250823b61044757600080fd5b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146104e157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f4533000000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8316600090815260208190526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905583156106175760008373ffffffffffffffffffffffffffffffffffffffff168686604051808383808284376040519201945060009350909150508083038183865af19150503d80600081146105a0576040519150601f19603f3d011682016040523d82523d6000602084013e6105a5565b606091505b505090508061061557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f4534000000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b505b6040805173ffffffffffffffffffffffffffffffffffffffff85168152602081018a905281517f94bfd9af14ef450884c8a7ddb5734e2e1e14e70a1c84f0801cc5a29e34d26428929181900390910190a1505095945050505050565b604080517fff000000000000000000000000000000000000000000000000000000000000006020808301919091523060601b6021830152603582019490945260558082019390935281518082039093018352607501905280519101209056fea265627a7a72315820daceebb60b80dca77cc18d9120921ff6fab5e3cb54a009370727c6d8e23caafb64736f6c634300050c00321ba01820182018201820182018201820182018201820182018201820182018201828a01820182018201820182018201820182018201820182018201820182018201828";

async function ensureCreate2any(provider: EthereumProvider): Promise<void> {
  const code = await provider.send("eth_getCode", [
    CREATE2ANY_ADDRESS,
    "latest",
  ]);
  if (code === "0x") {
    const [from] = await provider.send("eth_accounts");

    await provider.send("eth_sendTransaction", [
      {
        from,
        to: CREATE2ANY_DEPLOYER,
        value: "0x2a3a2b07294f000",
      },
    ]);

    await provider.send("eth_sendRawTransaction", [CREATE2ANY_PAYLOAD]);

    console.log("create2any creator successfully deployed");
  } else {
    console.debug("create2any exist");
  }
}

subtask(TASK_NODE_GET_PROVIDER).setAction(
  async (args: any, hre: any, runSuper: any): Promise<EthereumProvider> => {
    const provider = await runSuper(args);
    await ensureCreate2any(provider);

    return provider;
  }
);

subtask(TASK_TEST_SETUP_TEST_ENVIRONMENT).setAction(
  async (args: any, hre: any, runSuper: any): Promise<void> => {
    await runSuper(args);
    await ensureCreate2any(hre.network.provider);
  }
);

subtask("ensureCreate2any").setAction(
  async (args: any, hre: any, runSuper: any): Promise<void> => {
    await ensureCreate2any(hre.network.provider);
  }
);
